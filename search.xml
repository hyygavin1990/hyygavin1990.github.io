<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/06/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/06/25/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html">Linux常用命令  <![CDATA[<h1 id="1-防火墙命令"><a href="#1-防火墙命令" class="headerlink" title="1.防火墙命令"></a>1.防火墙命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已经开放的端口</span></span><br><span class="line">firewall-cmd --list-ports</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启单个端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=7891/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启多个端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=9010-9059/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除单个端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多个端口</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=9010-9059/tcp --permanent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">增加rich-rules</span></span><br><span class="line">firewall-cmd --permanent --add-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.2.34&quot; port protocol=&quot;tcp&quot; port=&quot;9876&quot; accept&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除rich-rules</span></span><br><span class="line">firewall-cmd --permanent --remove-rich-rule=&quot;rule family=&quot;ipv4&quot; source address=&quot;192.168.2.30&quot; port protocol=&quot;tcp&quot; port=&quot;9876&quot; accept&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启firewall，上述修改之后必须要执行reload才能生效</span></span><br><span class="line">firewall-cmd --reload </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止firewall</span></span><br><span class="line">systemctl stop firewalld.service </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止firewall开机启动</span></span><br><span class="line">systemctl disable firewalld.service </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos6</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启单个端口</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">保存规则</span></span><br><span class="line">/etc/rc.d/init.d/iptables save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看打开的端口</span></span><br><span class="line">/etc/init.d/iptables status</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ubuntu 后续补充</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-压缩命令"><a href="#2-压缩命令" class="headerlink" title="2.压缩命令"></a>2.压缩命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将<span class="built_in">test</span>目录里所有的文件打包成test.tar</span> </span><br><span class="line">tar -cvf test.tar ./test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压tar</span></span><br><span class="line">tar -xvf test.tar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对<span class="built_in">test</span>目录先生成一个tar压缩包然后使用gzip压缩，生成一个gzip压缩过的包，命名为test.tar.gz</span></span><br><span class="line">tar -czf test.tar.gz ./test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压tar.gz</span></span><br><span class="line">tar -xzvf test.tar.gz</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对<span class="built_in">test</span>目录先生成一个tar压缩包然后使用bzip2压缩，生成一个bzip2压缩过的包，命名为test.tar.bz2</span></span><br><span class="line">tar -cjf test.tar.bz2 ./test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压 tar.bz2</span></span><br><span class="line">tar -xjvf test.tar.bz2 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将<span class="built_in">test</span>目录压缩为zip包，注意加上-r,表示递归</span></span><br><span class="line">zip -r test.zip ./test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压zip</span></span><br><span class="line">unzip test.zip</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-curl-命令"><a href="#3-curl-命令" class="headerlink" title="3.curl 命令"></a>3.curl 命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通</span></span><br><span class="line">curl 地址</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">params方式</span></span><br><span class="line">curl -d &#x27;a=aaaa&amp;b=xxxx&#x27; 地址</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">json方式请求</span></span><br><span class="line">curl &#x27;http://localhost:8080/cnd_inke/qc/v2/inke&#x27; \</span><br><span class="line">-H &quot;Content-Type:application/json&quot; \</span><br><span class="line">-H &#x27;Authorization:bearer&#x27; \</span><br><span class="line">-X POST \</span><br><span class="line">-d &#x27;&#123;&quot;Id&quot;:&quot;12330245&quot;,&quot;visitTimes&quot;:1,&quot;docType&quot;:&quot;散文&quot;,&quot;docId&quot;:&quot;36e5854f5f0e4f80b7ccc6c52c063243&quot;&#125;&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载</span></span><br><span class="line">curl -L 下载地址 -o 目标目录</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-内网复制"><a href="#4-内网复制" class="headerlink" title="4.内网复制"></a>4.内网复制</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sshpass插件，无需手动输入密码</span></span><br><span class="line">yum install sshpass -y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制远程服务器数据到本地</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无需输入密码</span></span><br><span class="line">sshpass -p 密码 scp -o StrictHostKeyChecking=no -r -p -P ssh服务端口 root@源服务器IP:需要拷贝的文件或者目录  本机文件或者目录地址</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要输入密码</span></span><br><span class="line">scp -o StrictHostKeyChecking=no -r -p -P ssh服务端口 root@源服务器IP:需要拷贝的文件或者目录  本机文件或者目录地址</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制本地服务器数据到远程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">无需输入密码</span></span><br><span class="line">sshpass -p 密码 scp -o StrictHostKeyChecking=no -r -p -P ssh服务端口 本机文件或者目录地址 root@目标服务器IP:需要拷贝的文件或者目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要输入密码</span></span><br><span class="line">scp -o StrictHostKeyChecking=no -r -p -P ssh服务端口 root@源服务器IP:需要拷贝的文件或者目录  本机文件或者目录地址</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis安装说明</title>
      <link href="/2024/06/25/Redis%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/"/>
      <url>/2024/06/25/Redis%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html">Redis安装说明  <![CDATA[<h1 id="Redis安装说明"><a href="#Redis安装说明" class="headerlink" title="Redis安装说明"></a>Redis安装说明</h1><p>大多数企业都是基于Linux服务器来部署项目，而且Redis官方也没有提供Windows版本的安装包。因此课程中我们会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为CentOS 7.</p><p>Redis的官方网站地址：<a href="https://redis.io/">https://redis.io/</a></p><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1.单机安装Redis"></a>1.单机安装Redis</h1><h2 id="1-1-安装Redis依赖"><a href="#1-1-安装Redis依赖" class="headerlink" title="1.1.安装Redis依赖"></a>1.1.安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y gcc tcl</span><br></pre></td></tr></table></figure><h2 id="1-2-上传安装包并解压"><a href="#1-2-上传安装包并解压" class="headerlink" title="1.2.上传安装包并解压"></a>1.2.上传安装包并解压</h2><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="/assets/redis/image-20211211071712536.png" alt="image-20211211071712536"></p><p>例如，我放到了&#x2F;usr&#x2F;local&#x2F;src 目录：</p><p><img src="/assets/redis/image-20211211080151539.png" alt="image-20211211080151539"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xzf redis-6.2.6.tar.gz</span><br></pre></td></tr></table></figure><p>解压后：</p><p><img src="/assets/redis/image-20211211080339076.png" alt="image-20211211080339076"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.6</span><br></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="/assets/redis/image-20211211080603710.png" alt="image-20211211080603710"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3.启动"></a>1.3.启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-1-默认启动"><a href="#1-3-1-默认启动" class="headerlink" title="1.3.1.默认启动"></a>1.3.1.默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="/assets/redis/image-20211211081716167.png" alt="image-20211211081716167"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-2-指定配置启动"><a href="#1-3-2-指定配置启动" class="headerlink" title="1.3.2.指定配置启动"></a>1.3.2.指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/assets/redis/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp redis.conf redis.conf.bck</span><br></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span><br><span class="line"><span class="attr">bind</span> <span class="string">0.0.0.0</span></span><br><span class="line"><span class="comment"># 守护进程，修改为yes后即可后台运行</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 密码，设置后访问Redis必须输入密码</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">123321</span></span><br></pre></td></tr></table></figure><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">.</span></span><br><span class="line"><span class="comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span><br><span class="line"><span class="attr">databases</span> <span class="string">1</span></span><br><span class="line"><span class="comment"># 设置redis能够使用的最大内存</span></span><br><span class="line"><span class="attr">maxmemory</span> <span class="string">512mb</span></span><br><span class="line"><span class="comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;redis.log&quot;</span></span><br></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入redis安装目录 </span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/src/redis-6.2.6</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure><p>停止服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span><br><span class="line"><span class="comment"># 因为之前配置了密码，因此需要通过 -u 来指定密码</span></span><br><span class="line">redis-cli -u 123321 shutdown</span><br></pre></td></tr></table></figure><h3 id="1-3-3-开机自启"><a href="#1-3-3-开机自启" class="headerlink" title="1.3.3.开机自启"></a>1.3.3.开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start redis</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop redis</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart redis</span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">systemctl status redis</span><br></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> redis</span><br></pre></td></tr></table></figure><h1 id="2-Redis客户端"><a href="#2-Redis客户端" class="headerlink" title="2.Redis客户端"></a>2.Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="2-1-Redis命令行客户端"><a href="#2-1-Redis命令行客户端" class="headerlink" title="2.1.Redis命令行客户端"></a>2.1.Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">redis-cli [options] [commonds]</span><br></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/assets/redis/image-20211211110439353.png" alt="image-20211211110439353"></p><h2 id="2-2-图形化桌面客户端"><a href="#2-2-图形化桌面客户端" class="headerlink" title="2.2.图形化桌面客户端"></a>2.2.图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，地址：<a href="https://github.com/uglide/RedisDesktopManager">https://github.com/uglide/RedisDesktopManager</a></p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>在下面这个仓库可以找到安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a></p><p><img src="/assets/redis/image-20211211111351885.png" alt="image-20211211111351885"></p><h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1.安装"></a>2.2.1.安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="/assets/redis/image-20211214154938770.png" alt="image-20211214154938770"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="/assets/redis/image-20211214155123841.png" alt="image-20211214155123841"></p><p>此处略。</p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/assets/redis/image-20211211110935819.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="/assets/redis/image-20211214155406692.png" alt="image-20211214155406692"></p><h3 id="2-2-2-建立连接"><a href="#2-2-2-建立连接" class="headerlink" title="2.2.2.建立连接"></a>2.2.2.建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/assets/redis/image-20211214155424842.png" alt="image-20211214155424842"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/assets/redis/image-20211211111614483.png" alt="image-20211211111614483"></p><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/assets/redis/image-20211214155804523.png" alt="image-20211214155804523"></p><p>点击即可建立连接了：</p><p><img src="/assets/redis/image-20211214155849495.png" alt="image-20211214155849495"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择 0号库</span></span><br><span class="line"><span class="keyword">select</span> 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 安装攻略 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Haproxy安装</title>
      <link href="/2024/06/25/Haproxy%E5%AE%89%E8%A3%85/"/>
      <url>/2024/06/25/Haproxy%E5%AE%89%E8%A3%85/</url>
      
        <content type="html">Haproxy安装  <![CDATA[<h1 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://www.haproxy.org/download/1.8/src/haproxy-1.8.14.tar.gz</span><br></pre></td></tr></table></figure><h1 id="2-解压"><a href="#2-解压" class="headerlink" title="2.解压"></a>2.解压</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf haproxy-1.8.14.tar.gz</span><br><span class="line">cd haproxy-1.8.14</span><br></pre></td></tr></table></figure><h1 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make TARGET=linux2628 ARCH=x86_64 PREFIX=/mydata/haproxy</span><br><span class="line">make install PREFIX=/mydata/haproxy</span><br></pre></td></tr></table></figure><p>参数说明<br>TARGET&#x3D;linux26 #内核版本，使用uname -r查看内核，如：2.6.18-371.el5，此时该参数就为linux26；kernel 大于2.6.28的<br>用：TARGET&#x3D;linux2628<br>ARCH&#x3D;x86_64 #系统位数<br>PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;haprpxy  #&#x2F;usr&#x2F;local&#x2F;haprpxy为haprpxy安装路径</p><h1 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/haproxy #进入haproxy安装目录</span><br><span class="line">touch haproxy.cfg #创建配置文件</span><br><span class="line">vi haproxy.cfg #编辑配置文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">haproxy.cfg设置为单线程模式，配置如下</span></span><br><span class="line">global</span><br><span class="line">    log 127.0.0.1 local1</span><br><span class="line">    maxconn 65000             #最大连接数</span><br><span class="line">    daemon                    #守护进程运行</span><br><span class="line">    nbproc 1                  #进程数量</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    log     global</span><br><span class="line">    mode    http               #7层#默认的模式mode &#123;tcp|http|health&#125;,tcp是4层,http是7层,health只会返回OK</span><br><span class="line">    option  httplog            #http 日志格式</span><br><span class="line">    option  httpclose          #主动关闭http通道,HA-Proxy不支持keep-alive模式</span><br><span class="line">    option  redispatch         #serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class="line">    retries  3</span><br><span class="line">    maxconn 50000              #最大连接数</span><br><span class="line">    timeout http-request 10s</span><br><span class="line">    timeout queue  1m</span><br><span class="line">    timeout connect 10s</span><br><span class="line">    timeout client  1m</span><br><span class="line">    timeout server  1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check 10s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frontend main</span><br><span class="line">    bind *:9999             #监听地址</span><br><span class="line">    default_backend   my_webserver     #定义一个名为my_app前端部分。此处将对于的请求转发给后端</span><br><span class="line">    balance roundrobin     #负载均衡算法（#banlance roundrobin 轮询）</span><br><span class="line"></span><br><span class="line">backend my_webserver</span><br><span class="line">    mode http</span><br><span class="line">    option  forwardfor</span><br><span class="line">    balance roundrobin</span><br><span class="line">    cookie  SERVERID</span><br><span class="line">    option  httpchk GET /demo</span><br><span class="line">    server  web01 192.168.2.90:9000 cookie web01 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web02 192.168.2.91:9000 cookie web02 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web03 192.168.2.92:9000 cookie web03 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web04 192.168.2.93:9000 cookie web04 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web05 192.168.2.94:9000 cookie web05 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web06 192.168.2.90:9001 cookie web06 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web07 192.168.2.91:9001 cookie web07 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web08 192.168.2.92:9001 cookie web08 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web09 192.168.2.93:9001 cookie web09 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">    server  web10 192.168.2.94:9001 cookie web10 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">haproxy.cfg设置为多线程模式，配置如下</span></span><br><span class="line">global</span><br><span class="line">    log 127.0.0.1 local1</span><br><span class="line">    maxconn 65000            #最大连接数</span><br><span class="line">    ulimit-n 130019         #设置每个进程的可用的最大文件描述符</span><br><span class="line">    daemon                   #守护进程运行                 </span><br><span class="line">    nbproc 8#进程数量</span><br><span class="line">    cpu-map 1 0</span><br><span class="line">    cpu-map 2 1</span><br><span class="line">    cpu-map 3 2</span><br><span class="line">    cpu-map 4 3</span><br><span class="line">    cpu-map 5 4</span><br><span class="line">    cpu-map 6 5</span><br><span class="line">    cpu-map 7 6</span><br><span class="line">    cpu-map 8 7</span><br><span class="line">    nbthread 5</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">        log     global</span><br><span class="line">        mode    http               #7层#默认的模式mode &#123;tcp|http|health&#125;,tcp是4层,http是7层,health只会返回OK</span><br><span class="line">        option  httplog            #http 日志格式</span><br><span class="line">        option  httpclose          #主动关闭http通道,HA-Proxy不支持keep-alive模式</span><br><span class="line">        option  redispatch         #serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class="line">        retries  3</span><br><span class="line">        maxconn 50000              #最大连接数</span><br><span class="line">        timeout http-request 10s</span><br><span class="line">        timeout queue  1m</span><br><span class="line">        timeout connect 10s</span><br><span class="line">        timeout client  1m</span><br><span class="line">        timeout server  1m</span><br><span class="line">        timeout http-keep-alive 30s</span><br><span class="line">        timeout check 10s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">frontend main</span><br><span class="line">        bind *:9999             #监听地址</span><br><span class="line">        default_backend   my_webserver     #定义一个名为my_app前端部分。此处将对于的请求转发给后端</span><br><span class="line">        #balance roundrobin     #负载均衡算法（#banlance roundrobin 轮询）</span><br><span class="line"></span><br><span class="line">backend my_webserver</span><br><span class="line">        mode http</span><br><span class="line">        option  forwardfor</span><br><span class="line">        balance roundrobin</span><br><span class="line">        cookie  SERVERID</span><br><span class="line">        option  httpchk GET /test</span><br><span class="line">        server  web01 192.168.2.37:9000 cookie web01 check inter 2000 rise 3 fall 3 weight 3 # 这里全部都是gateway的地址</span><br><span class="line">        server  web02 192.168.2.38:9000 cookie web02 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">        server  web03 192.168.2.38:9001 cookie web03 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">        server  web06 192.168.2.40:9000 cookie web06 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">        server  web07 192.168.2.40:9001 cookie web07 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line">        server  web08 192.168.2.41:9000 cookie web08 check inter 2000 rise 3 fall 3 weight 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-运行"><a href="#5-运行" class="headerlink" title="5.运行"></a>5.运行</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mydata/haproxy</span><br><span class="line">./sbin/haproxy -f haproxy.cfg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 安装攻略 </tag>
            
            <tag> haproxy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
